https://www.youtube.com/watch?v=Oe421EPjeBE   Nodejs course 8 hrs

johnsmilga.com   (all the code for the course is here, download as zip)

node and express.js framework backend fullstack



Part1 node and express.js fundamentals, aim is to build fast scalable server side apps with node

Nodejs is an environment to run js outside of the browser, created in 2009, and built on chromes v8 js engine

Should know html css js and ES6, callbacks promises and async-await

Browser Apps: js DOM, Window, interactive apps, No filesystem, fragmentations, ES6 modules (In browser modules are optional)

Node js Apps:  No DOM, or Window, server side apps, filesystem, versions, common js	(No access to browser api's, node apps are just pure logic with no graphic i/f, we can access filesystem,
apps only depends on nodejs version it was built with, and we just keep it that way, in the version it was built in. In nodejs you have access to modules by default)

Download node LTS (node --version or node -v to display version, for production apps LTS is recommended, version 18.15.0 latest LTS, His version is 14.15.5 LTS,)

My npm ver 9.6.2  His ver 6.14.11

How do we get node to evaluate our code? REPL (Read-Eval-Print Loop) or CLI executable, which means running our app code in node

A Read-Eval-Print Loop, or REPL, is a computer environment where user inputs are read and evaluated, and then the results are returned to the user. 
REPLs provide an interactive environment to explore tools available in specific environments or programming languages.

REPL is for playing around and CLI is for everything else.

To fire up REPL just type node with no arguements, nothing and enter (will display welcome to node.js version 18.15.0 Type ".help" for more information. > )(The > means we are in the repl)

example type const name = "Terry"  enter, display will say undefined, type name and display will say 'Terry'  press control c to get escape message

Now how do we get node to evaluate our code? start by creating a project, create a folder for the project and start vscode and drag and drop folder into vscode, mines on the desktop
in node folder called node8hr

create a new file called app.js

In app.js type:

const amount = 12

if(amount < 10){
    console.log("small number");
}
else{
    console.log("large number");
}

console.log(`its my first nodeapp!!!`);

to execute code in windows terminal type cd (and drag drop project folder, will auto complete path
and press enter)

now we are at correct path type:  node app.js

will display output from app.js !!!!

From now on will be using the terminal in vscode (Note may have to use windows terminal for power user later, will see)

Concepts of globals: (global variables in node, and i think functions etc)

Globals no window !!! he will show some global variables as we progress

Some are listed below:
__dirname   path to current directory (Note double underscore)
__filename  filename
require - function to use modules (common js)
module -  info about current module (file)
process - info about the enviroment where the program is being executed (very useful)
the enviroment might be in the cloud etc

we can console.log the above, eg:

console.log(__dirname) (need to save then type: node app.js) etc

we also have setInterval and setTimeOut etc, eg 

setInterval(() => {             (setInterval with a callback function)
    console.log("Hiya Tez")
}, 1000)

will just display Hiya Tez every second  (press control c to stop)

note you can just type in node app  rather than node app.js, also
just press arrow key up to cycle past commands
clear or cls clears the terminal screen


MODULES IN Node  (note similar to react modules, but nodejs uses commonjs)

You do not have all your code in app.js, but split also among modules.

example:

const john = "john"
const peter = "peter"

const sayHi = (name) => {       (note declred a const as a function called sayHi, that passes the parameter name)
console.log(`Hi there ${name}`)
}
sayHi("susan")
sayHi(peter)
sayHi(john)

Node uses Commonjs, every file in node is a module (by default)
Modules  encapsulted code (where we only share the minimum)

now example with modules (note there are no folders, everything is files at root)

create a file called names.js  (cut the 3 const below and paste in names.js)
and another called utils.js    (cut the function sayHi below and paste in utils.js)

const secret = "SUPER SECRET"  (can be accessed anywhere, ie available everywhere  in this file)
const john = "john";
const peter = "peter";

const sayHi = (name) => {
  console.log(`Hi there ${name}`);
};
sayHi("susan");
sayHi(peter);
sayHi(john);

names.js file:

//local
const secret = "SUPER SECRET"
//shared
const john = "john";
const peter = "peter";
module.exports = {john,peter}   (exporting as an object)

utils.js file:

const sayHi = (name) => {
  console.log(`Hi there ${name}`);
};

module.exports = sayHi  (exporting as a function)

app.js file:

const names = require("./names");
const sayHi = require("./utils");
sayHi("susan");
sayHi(names.peter);  (note need names.peter now since we exported as an object)
sayHi(names.john);   (note need names.john now since we exported as an object)

when run, ie node app.js in terminal, will display
Hi there susan
Hi there peter
Hi there john

Export as you go (another way to do above)

create a new file called altflavor.js

const items = ["item1", "item2"]  (Purposely creating multiple data types, here an array)
const person = {                  (here an object)
    name: "bob",
}

We can also do it this way:

module.exports.items = ["item1", "item2"]
const person = {
    name: "bob",
}

module.exports.singlePerson = person

now in app.js add these lines:  const data = require("./altflavor") and console.log(data);

const names = require("./names");
const sayHi = require("./utils");
const data = require("./altflavor")
console.log(data);
sayHi("susan");
sayHi(names.peter);
sayHi(names.john);

run app.js

Next a Mind grenade !!

remove the console.log line from app.js

new file mindbomb.js

const num1 = 5;
const num2 = 10;

function addValues(){
    console.log(`the sum is : ${num1 + num2}`)
}

addValues()     Note no exports here just invoking the function
                but need to put require("./mindbomb") in app.js

run app.js      will display the sum is : 15 !!!! so by invoking the function
                in mindbomb.js we do not need to exports in mindbomb.js
                and we did not require a variable or invoke a variable.
                Not unique, can do in ES6 modules too, will be using the 
                above method with 3rd party modules later. This is a reminder that 
                When you import a module you actually invoke it. When node exports 
                mindbomb.js it actually wraps it in the function


Built in node modules: eg os (operating system module), path, fs (file system module)
and HHTP module which we will use to set up our http server, plus many more. For more 
info on module methods and properties go to node documentation on web site

create file modules.js then cut all of app.js and paste in modules.js

back in app.js which is empty now. Lets look at the os module which provides many methods and properties 
for the operating system and server

type the code: const os = require("os")  Note no path needed as its a built in module to node.
Also by assigning to a variable, just need to type os. something to have access to all the methods etc
type os.  and note all the methods and properties will appear in the drop down listed

so add this code to app.js 

const os = require("os");

//info about current user
const user = os.userInfo();
console.log(user);

and run app.js  will display user info

add the next bit of code:
//this method returns the system uptime in seconds
console.log(`The system uptime is ${os.uptime()} seconds`);

run app.js will display the system uptime 

add to app.js:

const currentOS = {
  name: os.type(),
  release: os.release(),
  totalMem: os.totalmem(),
  freeMem: os.freemem(),
};
console.log(currentOS);

run app.js will display the system memory etc

cut app.js and paste into osmodule.js

Now looking at the inbuilt node path module:
Make a folder content, in that folder make a folder subfolder, and in subfolder add test.txt
add this code to app.js:

const path = require("path");   pass in module we want to get, ie path


console.log(path.sep);          will display the path seperator which is \ a back slash on windows, forward slash on mac

const filePath = path.join("content", "subfolder", "test.txt");  joins a sequence of path segments
console.log(filePath);          will display a normalising path and get it as a value

const base = path.basename(filePath);
console.log(base);              will display text.txt which is my base, ie file at end of filePath

const absolute = path.resolve(__dirname, "content", "subfolder", "test.txt");
console.log(absolute);          path.resolve returns an absolute path to test.txt

save above as pathmodule.js

new app.js, looking at filesystem fs

up to 1:10:49/8:16:47